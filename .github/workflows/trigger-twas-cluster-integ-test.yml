name: trigger-twas-cluster-integ-test

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      ndImageResourceId:
        description: 'ndImageResourceId'
        required: false
      ihsImageResourceId:
        description: 'ihsImageResourceId'
        required: false
env:
  accessToken: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  twasClusterRepo: ${{ secrets.USER_NAME }}/azure.websphere-traditional.cluster
  ndImageResourceId: ${{ github.event.inputs.ndImageResourceId }}
  ihsImageResourceId: ${{ github.event.inputs.ihsImageResourceId }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Verify the image with twas-cluster integration-test pipeline
        run: |
          # Trigger the workflow run
          requestData={\"ref\":\"main\",\"inputs\":{\"databaseType\":\"none\",\"ndImageResourceId\":\"${ndImageResourceId}\",\"ihsImageResourceId\":\"${ihsImageResourceId}\"}}
          curl --verbose -L -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${accessToken}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ env.twasClusterRepo }}/actions/workflows/integration-test.yaml/dispatches \
            -d $(echo $requestData | jq -c)
          
          # Wait until the workflow run starts
          idAndStatus=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${accessToken}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ env.twasClusterRepo }}/actions/workflows/integration-test.yaml/runs \
            | jq -r '.workflow_runs[0] | {id, status}')
          status=$(echo $idAndStatus | jq -r '.status')
          while [[ $status != queued ]]
          do
            echo "Wait until the workflow run starts..."
            idAndStatus=$(curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${accessToken}"\
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ env.twasClusterRepo }}/actions/workflows/integration-test.yaml/runs \
              | jq -r '.workflow_runs[0] | {id, status}')
            status=$(echo $idAndStatus | jq -r '.status')
            echo "The latest workflow run is ${idAndStatus}"
          done
          workflowRunId=$(echo $idAndStatus | jq '.id')

          # Wait until the workflow run completes
          status=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${accessToken}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ env.twasClusterRepo }}/actions/runs/$workflowRunId \
            | jq -r '.status')
          while [[ $status != completed ]]
          do
            sleep 60
            echo "Wait until the workflow run ${workflowRunId} completes..."
            status=$(curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${accessToken}"\
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ env.twasClusterRepo }}/actions/runs/$workflowRunId \
              | jq -r '.status')
            echo "Workflow run ${workflowRunId} is ${status}"
          done
          
          # Verify the workflow run result
          jobs=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${accessToken}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ env.twasClusterRepo }}/actions/runs/$workflowRunId/jobs)
          successIntegTestJobCnt=$(echo $jobs | jq 'select(.jobs != null) | .jobs | map(select(.name=="integration-test" and .conclusion=="success")) | length')
          if [[ $successIntegTestJobCnt != 1 ]]; then
            echo "twas-cluster integration test workflow run ${workflowRunId} failed."
            exit 1
          else
            echo "twas-cluster integration test workflow run ${workflowRunId} succeeded."
          fi
  summary:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Output inputs from workflow_dispatch
        run: echo "${{ toJSON(github.event.inputs) }}"
      - name: Output client_payload from repository_dispatch
        run: echo "${{ toJSON(github.event.client_payload) }}"
