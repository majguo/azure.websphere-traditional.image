# This is a basic workflow to help you get started with Actions

name: twas-base-trial CICD

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Allows you to run this workflow using GitHub APIs
  # PERSONAL_ACCESS_TOKEN=<GITHUB_PERSONAL_ACCESS_TOKEN>
  # REPO_NAME=WASdev/azure.websphere-traditional.image
  # curl --verbose -XPOST -u "WASdev:${PERSONAL_ACCESS_TOKEN}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/${REPO_NAME}/actions/workflows/twas-base-trialBuild.yml/dispatches --data '{"ref": "main"}'
  repository_dispatch:
    types: [integration-test-twasbase-trial, integration-test-all]
  # sample request
  # PERSONAL_ACCESS_TOKEN=<GITHUB_PERSONAL_ACCESS_TOKEN>
  # REPO_NAME=WASdev/azure.websphere-traditional.image
  # curl --verbose -X POST https://api.github.com/repos/${REPO_NAME}/dispatches -H "Accept: application/vnd.github.everest-preview+json" -H "Authorization: token ${PERSONAL_ACCESS_TOKEN}" --data '{"event_type": "integration-test-twasbase-trial"}'
  # curl --verbose -X POST https://api.github.com/repos/${REPO_NAME}/dispatches -H "Accept: application/vnd.github.everest-preview+json" -H "Authorization: token ${PERSONAL_ACCESS_TOKEN}" --data '{"event_type": "integration-test-all"}'

env:
  # Latest version is at https://github.com/Azure/azure-cli/releases
  azCliVersion: 2.31.0
  # Commit hash from https://github.com/Azure/azure-javaee-iaas/commits/main
  ref_javaee: 13fe6ec487024eb61355d661ab5700ae90cb0a8f
  # Commit hash from https://github.com/Azure/arm-ttk/commits/master
  ref_armttk: d97aa57d259e2fc8562e11501b1cf902265129d9
  offerName: azure.websphere-traditional.image
  userName: ${{ secrets.USER_NAME }}
  azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}
  unEntitledIbmUserId: ${{ secrets.UNENTITLED_IBM_USER_ID }}
  unEntitledIbmPassword: ${{ secrets.UNENTITLED_IBM_USER_PWD }}
  vmName: twasbasetrial${{ github.run_id }}${{ github.run_number }}
  vmAdminId: ${{ secrets.VM_ADMIN_ID }}
  vmAdminPassword: ${{ secrets.VM_ADMIN_PASSWORD }}
  testResourceGroup: imageTest${{ github.run_id }}${{ github.run_number }}
  vhdStorageAccountName: storage${{ github.run_id }}${{ github.run_number }}
  msTeamsWebhook: ${{ secrets.MSTEAMS_WEBHOOK }}
  location: eastus
  # Installation directory, must be updated if virtualimage.properties/WAS_BASE_INSTALL_DIRECTORY changed 
  was_base_install_directory: /datadrive/IBM/WebSphere/Base/V9

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout azure-javaee-iaas
        uses: actions/checkout@v2
        with:
          repository: Azure/azure-javaee-iaas
          path: azure-javaee-iaas
          ref: ${{ env.ref_javaee }}

      - name: Checkout arm-ttk
        uses: actions/checkout@v2
        with:
          repository: Azure/arm-ttk
          path: arm-ttk
          ref: ${{ env.ref_armttk }}
      # Checks-out your repository `under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          path: ${{ env.offerName }}
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build azure-javaee-iaas
        run: mvn -DskipTests clean install --file azure-javaee-iaas/pom.xml
      - name: Build and test
        run: |
          # Add -Dgit.tag=<your local branch> if you are not using main
          mvn -Dgit.repo=${{ env.userName }} -DibmUserId=${{ env.unEntitledIbmUserId }} -DibmUserPwd=${{ env.unEntitledIbmPassword }} -DvmAdminId=${{ env.vmAdminId }} -DvmAdminPwd=${{ env.vmAdminPassword }} -DdnsLabelPrefix=wsp -Dtest.args="-Test All" -Ptemplate-validation-tests -Dtemplate.validation.tests.directory=../../arm-ttk/arm-ttk clean install --file ${{ env.offerName }}/twas-base-trial/pom.xml
      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ env.azureCredentials }}
      - name: Create image test resource group
        run: |
          az group create -l ${{ env.location }} -n ${{ env.testResourceGroup }}
      - name: Run deployment script
        run: |
          cd ${{ env.offerName }}/twas-base-trial/target/arm

          #parameters JSON
          parametersJson=$( cat ./parameters.json | jq '.parameters' )
          parametersJson=$( echo "$parametersJson" | jq --arg storageAccount "${{ env.vhdStorageAccountName }}" '{"storageAccount": {"value":$storageAccount}} + .' )
          parametersJson=$( echo "$parametersJson" | jq --arg vmName "${{ env.vmName }}" '{"vmName": {"value":$vmName}} + .' )

          #Start deployment
          echo "Starting deployment..."
          (
            az deployment group create --name ${{ github.run_id }}${{ github.run_number }} --resource-group ${{ env.testResourceGroup }} \
              --template-file ./mainTemplate.json --parameters "$parametersJson"
          )

          if [[ $? -eq 0 ]]; then
            echo "Template has been successfully deployed"
          fi
      - name: Query public IP of VM
        id: query-vm-ip
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.azCliVersion }}
          inlineScript: |
            echo "query public ip"
            publicIP=$(az vm show \
              --resource-group ${{ env.testResourceGroup }} \
              --name ${{ env.vmName }} -d \
              --query publicIps -o tsv)
            echo "##[set-output name=publicIP;]${publicIP}"
      - name: Create environment variable for VM
        id: env-vm-ip
        run: echo "wlsPublicIP=${{steps.query-vm-ip.outputs.publicIP}}" >> $GITHUB_ENV
      - name: Install cifs-utils
        run: |
          echo "pubilc IP of VM: ${wlsPublicIP}"
          echo "yum update starts"
          echo install sshpass
          sudo apt-get install -y sshpass
          timeout 1m sh -c 'until nc -zv $0 $1; do echo "nc rc: $?"; sleep 5; done' ${wlsPublicIP} 22
          sshpass -p ${{ env.vmAdminPassword }} -v ssh -p 22 -o StrictHostKeyChecking=no -o ConnectTimeout=100 -v -tt ${{ env.vmAdminId }}@${wlsPublicIP} 'echo "${{ env.vmAdminPassword }}" | sudo  -S yum install cifs-utils -y'
      - name: Update applications
        run: |
          echo "pubilc IP of VM: ${wlsPublicIP}"
          echo "yum update starts"
          echo install sshpass
          sudo apt-get install -y sshpass
          timeout 1m sh -c 'until nc -zv $0 $1; do echo "nc rc: $?"; sleep 5; done' ${wlsPublicIP} 22
          sshpass -p ${{ env.vmAdminPassword }} -v ssh -p 22 -o StrictHostKeyChecking=no -o ConnectTimeout=100 -v -tt ${{ env.vmAdminId }}@${wlsPublicIP} 'echo "${{ env.vmAdminPassword }}" | sudo -S yum update -y'
      - name: Deprovision
        run: |
          echo "pubilc IP of VM: ${wlsPublicIP}"
          echo "Deprovision starts"
          echo install sshpass
          sudo apt-get install -y sshpass
          timeout 1m sh -c 'until nc -zv $0 $1; do echo "nc rc: $?"; sleep 5; done' ${wlsPublicIP} 22
          sshpass -p ${{ env.vmAdminPassword }} -v ssh -p 22 -o StrictHostKeyChecking=no -o ConnectTimeout=100 -v -tt ${{ env.vmAdminId }}@${wlsPublicIP} 'echo "${{ env.vmAdminPassword }}" | sudo -S waagent -deprovision+user -force'
      - name: Generate VM Image
        run: |
          # Update the access level of vhd container
          vhdStorageAccountAccessKey=$(az storage account keys list --account-name ${{ env.vhdStorageAccountName }} --query "[?keyName=='key1'].value" -o tsv)
          echo ${vhdStorageAccountAccessKey}
          az storage container set-permission --account-name ${{ env.vhdStorageAccountName }} --account-key ${vhdStorageAccountAccessKey} --name vhds --public-access container
          # Create the image
          az vm deallocate --resource-group ${{ env.testResourceGroup }} --name ${{ env.vmName }}
          az vm generalize --resource-group ${{ env.testResourceGroup }} --name ${{ env.vmName }}
          az image create --resource-group ${{ env.testResourceGroup }} --name ${{ env.vmName }} --source ${{ env.vmName }}
      - name: Deploy VM using image
        run: |
          imageResourceId=$(az image show --name ${{ env.vmName }} --resource-group ${{ env.testResourceGroup }} --query id -o tsv)
          cd ${{ env.offerName }}/twas-base-trial/test
          az deployment group create --resource-group ${{ env.testResourceGroup }} \
              --name trial${{ github.run_id }}${{ github.run_number }} \
              --template-file ./mainTemplate.json \
              --parameters vmName=trial${{ github.run_id }}${{ github.run_number }} vmAdminId=${{ env.vmAdminId }} vmAdminPwd=${{ env.vmAdminPassword }} location=${{ env.location }} imageResourceId=$imageResourceId
      - name: Verify the IBM installations
        run: |
          echo "query public ip"
          trialVMIP=$(az vm show \
            --resource-group ${{ env.testResourceGroup }} \
            --name trial${{ github.run_id }}${{ github.run_number }} -d \
            --query publicIps -o tsv)
          echo "pubilc IP of VM: ${trialVMIP}"
          echo "Verifying WebSphere server installation"
          echo install sshpass
          sudo apt-get install -y sshpass
          timeout 1m sh -c 'until nc -zv $0 $1; do echo "nc rc: $?"; sleep 5; done' ${trialVMIP} 22
          
          # Check the installation path is removed
          echo "Check the installation path is removed"
          pathExists=$(sshpass -p ${{ env.vmAdminPassword }} -v ssh -p 22 -o StrictHostKeyChecking=no -o ConnectTimeout=100 -v -tt ${{ env.vmAdminId }}@${trialVMIP} 'if [ -d "${{ env.was_base_install_directory }}" ]; then echo true; else echo false; fi')
          if [[ $pathExists = false ]]; then
            echo "IBM installations do not exist"
            exit 1
          fi
      - name: Generate SAS url
        id: generate-sas-blob-url
        run: |
          #Get a minus-24-hour date for the SAS token
          minus24HoursUtc=$(date -u --date "$dte -24 hour" +%Y-%m-%dT%H:%MZ)
          echo $minus24HoursUtc

          #Get a plus-30-day date for the SAS token
          plus30DaysUtc=$(date -u --date "$dte 30 day" +%Y-%m-%dT%H:%MZ)
          echo $plus30DaysUtc

          vhdStorageAccountAccessKey=$(az storage account keys list --account-name ${{ env.vhdStorageAccountName }} --query "[?keyName=='key1'].value" -o tsv)
          echo ${vhdStorageAccountAccessKey}

          sasTokenForOffer=$(az storage container generate-sas --connection-string "DefaultEndpointsProtocol=https;AccountName=${{ env.vhdStorageAccountName }};AccountKey=${vhdStorageAccountAccessKey};EndpointSuffix=core.windows.net" --name vhds --permissions rl --start "${minus24HoursUtc}" --expiry "${plus30DaysUtc}" -o tsv)
          echo $sasTokenForOffer

          blobStorageEndpoint=$( az storage account show -n ${{ env.vhdStorageAccountName }} -g ${{ env.testResourceGroup }} -o json | jq -r '.primaryEndpoints.blob' )
          echo $blobStorageEndpoint

          osDiskSasUrl=${blobStorageEndpoint}vhds/${{ env.vmName }}.vhd?$sasTokenForOffer
          echo "osDiskSasUrl: ${osDiskSasUrl}"
          dataDiskSasUrl=${blobStorageEndpoint}vhds/${{ env.vmName }}datadisk1.vhd?$sasTokenForOffer
          echo "dataDiskSasUrl: ${dataDiskSasUrl}"
          
          echo "osDiskSasUrl: ${osDiskSasUrl}, dataDiskSasUrl: ${dataDiskSasUrl}" > sas-url.txt
          sasUrls=`cat sas-url.txt`
          echo "sas-url: ${sasUrls}"
      - name: Upload sas-url.txt
        uses: actions/upload-artifact@v2
        with:
          name: sasurl
          path: sas-url.txt

      - name: Delete all resources but vhd storage account in the test resource group
        id: delete-resources-in-group
        if: always()
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.azCliVersion }}
          inlineScript: |
            # Disks have to be deleted after the VM is deleted
            trialOsDiskId=$(az vm show --resource-group ${{ env.testResourceGroup }} --name trial${{ github.run_id }}${{ github.run_number }} --query "storageProfile.osDisk.managedDisk.id" -o tsv)
            echo "trialOsDiskId: ${trialOsDiskId}"

            trialDataDiskIds=$(az vm show --resource-group ${{ env.testResourceGroup }} --name trial${{ github.run_id }}${{ github.run_number }} --query "storageProfile.dataDisks" | jq -r 'map(.managedDisk.id) | join(" ")')
            echo "trialDataDiskIds: ${trialDataDiskIds}"

            vmForImage=$(az vm list --resource-group ${{ env.testResourceGroup }} --query "[?name=='${{ env.vmName }}']" | jq -r 'map(.id) | join(" ")')
            echo $vmForImage

            resourcesToDelete=$(az resource list --query "[?name!='${{ env.vhdStorageAccountName }}']" --resource-group ${{ env.testResourceGroup }} | jq -r 'map(.id) | join(" ")')
            echo $resourcesToDelete

            az vm delete --verbose --ids $vmForImage --yes
            az resource delete --verbose --ids $resourcesToDelete
            az disk delete --yes --resource-group ${{ env.testResourceGroup }} --ids ${trialOsDiskId} ${trialDataDiskIds}
  summary:
    needs: build
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download sas-url.txt
        uses: actions/download-artifact@v2
        with:
          name: sasurl
      - name: summarize jobs
        if: always()
        run: |
            workflow_jobs=$(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/WASdev/azure.websphere-traditional.image/actions/runs/${{ github.run_id }}/jobs)

            success_build_job=$(echo $workflow_jobs | jq '.jobs | map(select(.name=="build" and .conclusion=="success")) | length')
            echo "$success_build_job"
            if (($success_build_job == 0));then
                echo "Job failed, send notification to Teams"
                curl ${{ env.msTeamsWebhook }} \
                -H 'Content-Type: application/json' \
                --data-binary @- << EOF
                {
                "@context":"http://schema.org/extensions",
                "@type":"MessageCard",
                "text":"Workflow of repo 'azure.websphere-traditional.image/twas-base-trial' failed, please take a look at: https://github.com/WASdev/azure.websphere-traditional.image/actions/runs/${{ github.run_id }}"
                }
            EOF
            else
                echo "Job succeed, send notification to Teams"
                sasUrls=`cat sas-url.txt`
                echo ${sasUrls}
                curl ${{ env.msTeamsWebhook }} \
                -H 'Content-Type: application/json' \
                --data-binary @- << EOF
                {
                "@context":"http://schema.org/extensions",
                "@type":"MessageCard",
                "text":"Workflow of repo 'azure.websphere-traditional.image/twas-base-trial' succeeded, ${sasUrls}"
                }
            EOF
            fi
